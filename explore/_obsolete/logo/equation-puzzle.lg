; see https://kdr2.com/josh/2012-equation-puzzle.html

erase "roll
to roll :start :lst
    output sentence (filter [# >= :start] :lst) (filter [# < :start] :lst)
end

erase "check_eq
to check_eq :eq
    ifelse [and (item 2 :eq) = "/ (item 3 :eq) = 0] [output "false] [output run :eq]
end

erase "check
to check :lsts
    make "ans apply "map fput [(list ?1 ?2 ?3 "= 10 * ?4 + ?5)] :lsts
    make "res map "check_eq :ans
    if [(count filter [?] :res) > 1 ][
        print (sentence [correct equations count:] (count filter [?] :res))
        foreach :ans [show ?]
    ]
end

make "index [1 2 3 4 5 6 7 8 9 10]
make "offsets (crossmap [(list 1 ?1 ?2 ?3 ?4)] :index :index :index :index)

foreach :offsets [
    make "w1 roll (item 1 ?) [0 1 2 3 4 5 6 7 8 9]
    make "w2 roll (item 2 ?) [+ - * / + - * / + -]
    make "w3 roll (item 3 ?) [0 1 2 3 4 5 6 7 8 9]
    make "w4 roll (item 4 ?) [0 1 2 3 4 5 6 7 8 9]
    make "w5 roll (item 5 ?) [0 1 2 3 4 5 6 7 8 9]
    check (list :w1 :w2 :w3 :w4 :w5)
]