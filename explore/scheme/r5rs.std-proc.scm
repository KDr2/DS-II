;;
;;(name arity implementation)
;;
;; Equivalence Predicate
(eqv? 2 procedure)
(eq? 2 procedure)
(equal? 2 library-procedure)
;; Numbers
;; read-macro: #b,#o,#d,#x, #e, #i, SFDL
(number? 1 procedure)
(complex? 1 procedure)
(real? 1 procedure)
(rational 1 procedure)
(integer? 1 procedure)
(exact? 1 procedure)
(inexact? 1 procedure)
(= N>=2 procedure)
(> N>=2 procedure)
(< N>=2 procedure)
(>= N>=2 procedure)
(<= N>=2 procedure)
(zero? 1 library-procedure)
(positive? 1 library-procedure)
(negative? 1 library-procedure)
(odd? 1 library-procedure)
(even? 1 library-procedure)
(max N>=1 library-procedure)
(min N>=1 library-procedure)
(+ N>=1 procedure)
(* N>=1 procedure)
(- 1 procedure)
(- 2 procedure)
(- N>2 optional-procedure)
(/ 1 procedure)
(/ 2 procedure)
(/ N>2 optional-procedure)
(abs 1 library-procedure)
(quotient 2 procedure)
(remainder 2 procedure)
(modulo 2 procedure)
(gcd N>=1 library-procedure)
(lcm N>=1 library-procedure)
(numerator 1 procedure)
(denominator 1 procedure)
(floor 1 procedure)
(ceiling 1 procedure)
(truncate 1 procedure)
(round 1 procedure)
(rationalize 2 library-procedure)
(exp 1 procedure)
(log 1 procedure)
(sin 1 procedure)
(cos 1 procedure)
(tan 1 procedure)
(asin 1 procedure)
(acos 1 procedure)
(atan 1 procedure)
(atan 2 procedure)
(sqrt 1 procedure)
(expt 2 procedure)
(make-rectangular 2 procedure)
(make-polar 2 procedure)
(real-part 1 procedure)
(imag-part 1 procedure)
(magnitude 1 procedure)
(angle 1 procedure)
(exact->inexact 1 procedure)
(inexact->exact 1 procedure)
(number->string 1 procedure)
(number->string 2 procedure)
(string->number 1 procedure)
(string->number 2 procedure)
;; Booleans
(not 1 library-procedure)
(boolean? 1 library-procedure)
;; Pairs and Lists
(pair? 1 procedure)
(cons 2 procedure)
(set-car! 2 procedure)
(set-cdr! 2 procedure)
;; 2^1
(car 1 procedure)
(cdr 1 procedure)
;; - 2^2
(caar 1 library-procedure)
(cadr 1 library-procedure)
(cdar 1 library-procedure)
(cddr 1 library-procedure)
;;- 2^3
(caaar 1 library-procedure)
(caadr 1 library-procedure)
(cadar 1 library-procedure)
(caddr 1 library-procedure)
(cdaar 1 library-procedure)
(cdadr 1 library-procedure)
(cddar 1 library-procedure)
(cdddr 1 library-procedure)
;;- 2^4
(caaaar 1 library-procedure)
(caaadr 1 library-procedure)
(caadar 1 library-procedure)
(caaddr 1 library-procedure)
(cadaar 1 library-procedure)
(cadadr 1 library-procedure)
(caddar 1 library-procedure)
(cadddr 1 library-procedure)
(cdaaar 1 library-procedure)
(cdaadr 1 library-procedure)
(cdadar 1 library-procedure)
(cdaddr 1 library-procedure)
(cddaar 1 library-procedure)
(cddadr 1 library-procedure)
(cdddar 1 library-procedure)
(cddddr 1 library-procedure)
;; - end
(null? 1 library-procedure)
(list? 1 library-procedure)
(list N>=0 library-procedure)
(length 1 library-procedure)
(append N>1 library-procedure)
(reverse 1 library-procedure)
(list-tail 2 library-procedure)
(list-ref 2 library-procedure)
(memq 2 library-procedure)
(memv 2 library-procedure)
(member 2 library-procedure)
(assq 2 library-procedure)
(assv 2 library-procedure)
(assoc 2 library-procedure)
;; Symbols
(symbol? 1 procedure)
(symbol->string 1 procedure)
(string->symbol 1 procedure)
;; Characters
;;(read-macro #\C)
(char? 1 procedure)
(char=? 2 procedure)
(char>? 2 procedure)
(char<? 2 procedure)
(char>=? 2 procedure)
(char<=? 2 procedure)
(char-ci=? 2 library-procedure)
(char-ci>? 2 library-procedure)
(char-ci<? 2 library-procedure)
(char-ci>=? 2 library-procedure)
(char-ci<=? 2 library-procedure)
(char-alphabetic? 1 library-procedure)
(char-numeric? 1 library-procedure)
(char-whitespace? 1 library-procedure)
(char-upper-case? 1 library-procedure)
(char-lower-case? 1 library-procedure)
(char->integer 1 procedure)
(integer->char 1 procedure)
(char-upcase 1 library-procedure)
(char-downcase 1 library-procedure)
;;Strings
(string? 1 procedure)
(make-string 1 procedure)
(make-string 2 procedure)
(string N>=0 library-procedure)
(string-length 1 procedure)
(string-ref 2 procedure)
(string-set! 3 procedure)
(string=? 2 library-procedure)
(string>? 2 library-procedure)
(string<? 2 library-procedure)
(string>=? 2 library-procedure)
(string<=? 2 library-procedure)
(string-ci=? 2 library-procedure)
(string-ci>? 2 library-procedure)
(string-ci<? 2 library-procedure)
(string-ci>=? 2 library-procedure)
(string-ci<=? 2 library-procedure)
(substring 3 library-procedure)
(string-append N>=1 library-procedure)
(string->list 1 library-procedure)
(list->string 1 library-procedure)
(string-copy 1 library-procedure)
(string-fill! 2 library-procedure)
;;Vectors
(vector? 1 procedure)
(make-vector 1 procedure)
(make-vector 2 procedure)
(vector N>=0 library-procedure)
(vector-length 1 procedure)
(vector-ref 2 procedure)
(vector-set! 3 procedure)
(vector->list 1 library-procedure)
(list->vector 1 library-procedure)
(vector-fill! 2 library-procedure)
;; Control Features
(procedure? 1 procedure)
(apply N>=2 procedure)
(map N>=2 library-procedure)
(for-each N>=2 library-procedure)
(force 1 library-procedure)
(call-with-current-continuation 1 procedure)
(values N>=0 procedure)
(call-with-values 2 procedure)
(dynamic-wind 3 procedure)
;; Eval
(eval 2 procedure)
(scheme-report-environment 1 procedure)
(null-environment 1 procedure)
(interaction-environment 0 optional-procedure)
;; IO: Ports
(call-with-input-file 2 library-procedure)
(call-with-output-file 2 library-procedure)
(input-port? 1 procedure)
(output-port? 1 procedure)
(current-input-port 0 procedure)
(current-oputput-port 0 procedure)
(with-input-from-file 2 optional-procedure)
(with-output-to-file 2 optional-procedure)
(open-input-file 1 procedure)
(open-output-file 1 procedure)
(close-input-file 1 procedure)
(close-output-file 1 procedure)
;; IO: Input
(read 0 library-procedure)
(read 1 library-procedure)
(read-char 0 procedure)
(read-char 1 procedure)
(peek-char 0 procedure)
(peek-char 1 procedure)
(eof-object? 1 procedure)
(char-ready? 0 procedure)
(char-ready? 1 procedure)
;; IO: Output
(write 1 library-procedure)
(write 2 library-procedure)
(display 1 library-procedure)
(display 2 library-procedure)
(newline 1 library-procedure)
(newline 2 library-procedure)
(write-char 1 procedure)
(write-char 2 procedure)
;; System Interface
(load 1 optional-procedure)
(transcript-on 1 optional-procedure)
(transcript-off 0 optional-procedure)
;;
;; All 217 procedures
;;
